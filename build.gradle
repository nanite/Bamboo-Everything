plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

ext.isSnapshot = providers.environmentVariable("SNAPSHOT").map { it == "true" }.getOrElse(false)
def ENV = System.getenv()

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {
            if (ENV.NANITE_TOKEN) {
                maven {
                    url "https://maven.nanite.dev/releases"
                    credentials {
                        username = "nanite"
                        password = "${ENV.NANITE_TOKEN}"
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} Fabric ${mod_version}+mc${minecraft_version}"
        modLoaders.add("fabric")
    }

    def neoOptions = publishOptions {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} NeoForged ${mod_version}+mc${minecraft_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeNeo") {
        from(curseForgeOptions, neoOptions)
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
        modrinth("modrinthFabric") {
            from(modrinthOptions, fabricOptions)
            requires {
                slug = "fabric-api"
            }
        }

        modrinth("modrinthNeo") {
            from(modrinthOptions, neoOptions)
        }
    }

    github {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "${github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
    }
}
